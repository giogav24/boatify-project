{"ast":null,"code":"import { createStore } from \"vuex\";\n\n// Crea una nuova istanza dello store.\nconst store = createStore({\n  state() {\n    return {\n      nome: \"\",\n      cognome: \"\",\n      email: \"\",\n      nr_telefono: \"\",\n      ruolo: \"\",\n      token: \"\",\n      isLoggedIn: false // Aggiunto nuovo campo per indicare se l'utente è loggato\n    };\n  },\n  mutations: {\n    setToken(state, payload) {\n      state.nome = payload.nome;\n      state.email = payload.email;\n      state.nr_telefono = payload.nr_telefono;\n      state.ruolo = payload.ruolo;\n      state.token = payload.token;\n      state.isLoggedIn = true; // Imposta isLoggedIn a true quando l'utente effettua il login\n\n      // Salva le informazioni di login in localStorage\n      localStorage.setItem(\"loginInfo\", JSON.stringify(payload));\n    },\n    clearToken(state) {\n      state.nome = \"\";\n      state.email = \"\";\n      state.token = \"\";\n      state.isLoggedIn = false; // Imposta isLoggedIn a false quando l'utente effettua il logout\n\n      // Rimuovi le informazioni di login da localStorage\n      localStorage.removeItem(\"loginInfo\");\n    }\n  },\n  actions: {\n    initializeStore({\n      commit\n    }) {\n      const loginInfo = localStorage.getItem(\"loginInfo\");\n      if (loginInfo) {\n        const {\n          nome,\n          cognome,\n          email,\n          nr_telefono,\n          token\n        } = JSON.parse(loginInfo);\n        commit(\"setToken\", {\n          nome,\n          cognome,\n          email,\n          nr_telefono,\n          token\n        });\n      }\n    }\n    // Aggiungi altre azioni se necessario\n  },\n  getters: {\n    getToken: state => {\n      return state.token;\n    },\n    getUser: state => {\n      return state.nome;\n    },\n    getEmail: state => {\n      return state.email;\n    },\n    getTelefono: state => {\n      return state.nr_telefono;\n    },\n    getRuolo: state => {\n      return state.ruolo;\n    },\n    isLoggedIn: state => {\n      return state.isLoggedIn; // Getter per verificare se l'utente è loggato\n    }\n  }\n});\n\n// Inizializza lo store quando l'applicazione parte\nstore.dispatch(\"initializeStore\");\nexport default store;","map":{"version":3,"names":["createStore","store","state","nome","cognome","email","nr_telefono","ruolo","token","isLoggedIn","mutations","setToken","payload","localStorage","setItem","JSON","stringify","clearToken","removeItem","actions","initializeStore","commit","loginInfo","getItem","parse","getters","getToken","getUser","getEmail","getTelefono","getRuolo","dispatch"],"sources":["/Users/giogav/Desktop/boatify/boatify-project/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from \"vuex\";\n\n// Crea una nuova istanza dello store.\nconst store = createStore({\n  state() {\n    return {\n      nome: \"\",\n      cognome: \"\",\n      email: \"\",\n      nr_telefono: \"\",\n      ruolo: \"\",\n      token: \"\",\n      isLoggedIn: false, // Aggiunto nuovo campo per indicare se l'utente è loggato\n    };\n  },\n  mutations: {\n    setToken(state, payload) {\n      state.nome = payload.nome;\n      state.email = payload.email;\n      state.nr_telefono = payload.nr_telefono;\n      state.ruolo = payload.ruolo;\n      state.token = payload.token;\n      state.isLoggedIn = true; // Imposta isLoggedIn a true quando l'utente effettua il login\n\n      // Salva le informazioni di login in localStorage\n      localStorage.setItem(\"loginInfo\", JSON.stringify(payload));\n    },\n    clearToken(state) {\n      state.nome = \"\";\n      state.email = \"\";\n      state.token = \"\";\n      state.isLoggedIn = false; // Imposta isLoggedIn a false quando l'utente effettua il logout\n\n      // Rimuovi le informazioni di login da localStorage\n      localStorage.removeItem(\"loginInfo\");\n    },\n  },\n  actions: {\n    initializeStore({ commit }) {\n      const loginInfo = localStorage.getItem(\"loginInfo\");\n      if (loginInfo) {\n        const { nome, cognome, email, nr_telefono, token } = JSON.parse(loginInfo);\n        commit(\"setToken\", { nome, cognome, email, nr_telefono, token });\n      }\n    },\n    // Aggiungi altre azioni se necessario\n  },\n  getters: {\n    getToken: (state) => {\n      return state.token;\n    },\n    getUser: (state) => {\n      return state.nome;\n    },\n    getEmail: (state) => {\n      return state.email;\n    },\n    getTelefono: (state) => {\n      return state.nr_telefono;\n    },\n    getRuolo: (state) => {\n      return state.ruolo;\n    },\n    isLoggedIn: (state) => {\n      return state.isLoggedIn; // Getter per verificare se l'utente è loggato\n    },\n  },\n});\n\n// Inizializza lo store quando l'applicazione parte\nstore.dispatch(\"initializeStore\");\n\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;;AAElC;AACA,MAAMC,KAAK,GAAGD,WAAW,CAAC;EACxBE,KAAKA,CAAA,EAAG;IACN,OAAO;MACLC,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE,EAAE;MACfC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE,EAAE;MACTC,UAAU,EAAE,KAAK,CAAE;IACrB,CAAC;EACH,CAAC;EACDC,SAAS,EAAE;IACTC,QAAQA,CAACT,KAAK,EAAEU,OAAO,EAAE;MACvBV,KAAK,CAACC,IAAI,GAAGS,OAAO,CAACT,IAAI;MACzBD,KAAK,CAACG,KAAK,GAAGO,OAAO,CAACP,KAAK;MAC3BH,KAAK,CAACI,WAAW,GAAGM,OAAO,CAACN,WAAW;MACvCJ,KAAK,CAACK,KAAK,GAAGK,OAAO,CAACL,KAAK;MAC3BL,KAAK,CAACM,KAAK,GAAGI,OAAO,CAACJ,KAAK;MAC3BN,KAAK,CAACO,UAAU,GAAG,IAAI,CAAC,CAAC;;MAEzB;MACAI,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEC,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC,CAAC;IAC5D,CAAC;IACDK,UAAUA,CAACf,KAAK,EAAE;MAChBA,KAAK,CAACC,IAAI,GAAG,EAAE;MACfD,KAAK,CAACG,KAAK,GAAG,EAAE;MAChBH,KAAK,CAACM,KAAK,GAAG,EAAE;MAChBN,KAAK,CAACO,UAAU,GAAG,KAAK,CAAC,CAAC;;MAE1B;MACAI,YAAY,CAACK,UAAU,CAAC,WAAW,CAAC;IACtC;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,eAAeA,CAAC;MAAEC;IAAO,CAAC,EAAE;MAC1B,MAAMC,SAAS,GAAGT,YAAY,CAACU,OAAO,CAAC,WAAW,CAAC;MACnD,IAAID,SAAS,EAAE;QACb,MAAM;UAAEnB,IAAI;UAAEC,OAAO;UAAEC,KAAK;UAAEC,WAAW;UAAEE;QAAM,CAAC,GAAGO,IAAI,CAACS,KAAK,CAACF,SAAS,CAAC;QAC1ED,MAAM,CAAC,UAAU,EAAE;UAAElB,IAAI;UAAEC,OAAO;UAAEC,KAAK;UAAEC,WAAW;UAAEE;QAAM,CAAC,CAAC;MAClE;IACF;IACA;EACF,CAAC;EACDiB,OAAO,EAAE;IACPC,QAAQ,EAAGxB,KAAK,IAAK;MACnB,OAAOA,KAAK,CAACM,KAAK;IACpB,CAAC;IACDmB,OAAO,EAAGzB,KAAK,IAAK;MAClB,OAAOA,KAAK,CAACC,IAAI;IACnB,CAAC;IACDyB,QAAQ,EAAG1B,KAAK,IAAK;MACnB,OAAOA,KAAK,CAACG,KAAK;IACpB,CAAC;IACDwB,WAAW,EAAG3B,KAAK,IAAK;MACtB,OAAOA,KAAK,CAACI,WAAW;IAC1B,CAAC;IACDwB,QAAQ,EAAG5B,KAAK,IAAK;MACnB,OAAOA,KAAK,CAACK,KAAK;IACpB,CAAC;IACDE,UAAU,EAAGP,KAAK,IAAK;MACrB,OAAOA,KAAK,CAACO,UAAU,CAAC,CAAC;IAC3B;EACF;AACF,CAAC,CAAC;;AAEF;AACAR,KAAK,CAAC8B,QAAQ,CAAC,iBAAiB,CAAC;AAEjC,eAAe9B,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}